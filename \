from typing import List
from numbers import Number


ops = {'+', '-', '*', '/'}


def rec_parse(tokens: List[str]) -> List[str]:
    i = 0
    while i < len(tokens):
        if tokens[i] == '*' and i > 0 and i < len(tokens) - 1:
            try:
                prod = str(float(tokens[i-1]) * float(tokens[i+1]))
                if i < len(tokens)-2:
                    tokens = tokens[:i-1] + [prod] + tokens[i+2:]
                else:
                    tokens = tokens[:i-1] + [prod]
            except ValueError:
                continue
            i += 1
    stack = []
    token_iter = iter(tokens)
    for i in token_iter:
        if i == '(':
            brackets = 1
            j = next(token_iter)
            block = []
            if j == ')':
                brackets -= 1
            while brackets > 0:
                if j == ')':
                    brackets -= 1
                if brackets > 0:
                    block.append(j)
                    j = next(token_iter)
            stack += rec_parse(block)
        elif i in ops:
            k = ''
            try:
                k = next(token_iter)
                float(k)
                stack.append(k)
                stack.append(i)
            except StopIteration:
                raise Exception(f'Invalid expression: last token \'{i}\' should be a number')
            except ValueError:
                raise Exception(f'Invalid expression: last token \'{k}\' should be a number')
        else:
            try:
                float(i)
            except:
                raise Exception(f'Invalid expression: {i} should be a number')
            stack.append(i)
    return stack


def parse_expr(expr: str) -> List[str]:
    return rec_parse(expr.split())


def add(*nums: Number) -> Number:
    sum = 0
    for n in nums:
        sum += n
    return sum


def sub(left: Number, right: Number) -> Number:
    return left - right


def mult(*nums: Number) -> Number:
    prod = 1
    for n in nums:
        prod *= n
    return prod


def div(divisor: Number, dividend: Number) -> Number:
    if dividend == 0:
        raise Exception('Can\'t divide by zero!')
    return divisor/dividend
